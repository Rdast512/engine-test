# This top-level block provides global settings for clangd.
# Default to Windows compilation database
CompileFlags:
  CompilationDatabase: build/windows-clang-debug

---

# Configuration for Windows
If:
  # This condition applies the following settings if the file path
  # matches the typical Windows path format with backslashes.
  PathMatch: .*\\\\.*

CompileFlags:
  # Point to the compilation database generated in the Windows build directory.
  CompilationDatabase: build/windows-clang-debug
  # Flags to add to the compile commands for better IntelliSense.
  Add:
    # Add the path to the vcpkg installed headers for the Windows target (MSVC ABI).
    - -isystem
    - build/windows-clang-debug/vcpkg_installed/x64-windows/include
    # Suppress specific clangd diagnostics that are false positives
    - -Wno-error=default-member-initializer-not-yet-parsed
  # Flags to remove from the compile commands to avoid issues with clangd.
  Remove:
    - -fmodules-ts
    - -fmodule-mapper=*
    - -fdeps-format=*
    - -fmodule-file=*
    - --precompile
    - -march=native
    - -mtune=native
    # Remove GCC-specific debug flags (not compatible with MSVC ABI)
    - -D_GLIBCXX_DEBUG
    - -D_GLIBCXX_DEBUG_PEDANTIC

---

# Configuration for Linux
If:
  # This condition applies the following settings for absolute paths on Linux.
  PathMatch: '^/.*'

CompileFlags:
  # Point to the compilation database generated in the Linux build directory.
  CompilationDatabase: build/linux-clang-debug
  # Add the path to the vcpkg installed headers for the Linux target.
  Add:
    - -isystem
    - build/linux-clang-debug/vcpkg_installed/x64-linux/include
    # Suppress specific clangd diagnostics that are false positives
    - -Wno-error=default-member-initializer-not-yet-parsed
  # Flags to remove from the compile commands.
  Remove:
    - -fmodules-ts
    - -fmodule-mapper=*
    - -fdeps-format=*
    - -fmodule-file=*
    - --precompile
    - -march=native
    - -mtune=native